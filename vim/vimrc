let mapleader=","
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdcommenter'
Plugin 'Yggdroot/LeaderF'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'Raimondi/delimitMate'
Plugin 'bronson/vim-trailing-whitespace'
"Plugin 'Lokaltog/vim-powerline'
"Plugin 'tpope/vim-rails.git'
"Plugin 'tpope/vim-fugitive'

Plugin 'a.vim'
Plugin 'c.vim'
Plugin 'taglist.vim'
Plugin 'vimwiki'
"Plugin 'SuperTab'
Plugin 'winmanager'
Plugin 'bufexplorer.zip'
Plugin 'The-NERD-tree'
Plugin 'matrix.vim--Yang'
Plugin 'OmniCppComplete'
Plugin 'CmdlineComplete'
Plugin 'UltiSnips'
Plugin 'L9'
Plugin 'FuzzyFinder'
Plugin 'minibufexpl.vim'

"Plugin 'FencView.vim'
"Plugin 'Conque-Shell'
"Plugin 'Vimpress'
Plugin 'Markdown'
"Plugin 'LaTeX-Suite-aka-Vim-LaTeX'
"Plugin 'snipMate'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
filetype plugin on    " required

set number
set history=1000
set background=dark
syntax on
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set showmatch
"set expandtab
set guioptions-=T
set vb t_vb=
set ruler
set hls
set incsearch
set ignorecase
set cindent
"set cursorline
colorscheme desert
"taglist
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
"let Tlist_Auto_Open = 1
nmap fl :Tlist<CR>
nmap fm :WMToggle<CR>
nmap fn :NERDTreeToggle<CR>

"cscope config
if has ("cscope")
	set cscopetag
	set csto=0
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif

	set cscopeverbose

	"s	symbol: 	find all references to the token under cursor
	"g	global: 	find global definitions of the token under cursor
	"c	calls:		find all calls to the funtion name under cursor
	"t	text:		find all instances of the text under cursor
	"e 	egrep:		egrep search for the word under cursor
	"f	file:		open the filename under cursor
	"i	incudes:	find files that incude the filename under cursor
	"d	called:		find funtions that funtion under cursor calls

	nmap fa :cs find 
	nmap fs	:cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap fg	:cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap fc	:cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap ft	:cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap fe	:cs find e <C-R>=expand("<cword>")<CR><CR>
	"nmap tf	:cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap fh	:cs find f \<
	nmap fi	:cs find i <C-R>=expand("<cword>")<CR><CR>
	nmap fd	:cs find d <C-R>=expand("<cword>")<CR><CR>
endif
nmap ff <C-O>
nmap fj <C-]>
imap <C-J> <C-O>j
imap <C-K> <C-O>k
imap <C-H> <C-O>h
imap <C-L> <C-O>l

nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-H> <C-W>h
nmap <C-L> <C-W>l

set completeopt=longest,menu "自动补全配置,让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set cursorline "突出显示当前行，可用Ctrl+m切换是否显示
set autoread "当文件在外部被改变时，Vim自动更新载入
set nowrap "设置不自动换行
set writebackup "设置无备份文件
set nobackup "取消备份。 视情况自己改
set noswapfile "关闭交换文件
set showmode "开启模式显示
set cmdheight=1 "命令部分高度为1
set showcmd

"youcompleteme 默认tab s-tab 和自动补全冲突
""let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_complete_in_comments = 1 "在注释输入中也能补全
let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_cache_omnifunc = 0 " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
let g:ycm_seed_identifiers_with_syntax = 0 "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_complete_in_comments = 1 "在注释输入中也能补全
let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_cache_omnifunc = 0 " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
let g:ycm_seed_identifiers_with_syntax = 0 "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
"	let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
endif
" 直接触发自动补全
" "let g:ycm_key_invoke_completion = '<C-Space>'
" " 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_goto_buffer_command = 'horizontal-split'
" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
